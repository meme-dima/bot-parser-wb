import argparse
import json
import pandas as pd
import os
import random
import sys
import time
from multiprocessing import Pool, cpu_count
from parser import get_driver, get_product_links, get_all_product_links, parse_product_page
from filters import filter_product
from utils import get_random_user_agent, get_random_proxy, log_info, log_error, filter_working_proxies, mark_proxy_failed
from config import *
from telegram_notify import send_telegram_message, send_telegram_file
import logging
import traceback

BATCH_SIZE = 1000  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞
ERROR_LOG = 'errors.log'
PROGRESS_FILE = 'progress.json'

def save_results(results, out_json, out_csv):
    with open(out_json, 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    df = pd.DataFrame(results)
    df.to_csv(out_csv, index=False, encoding='utf-8-sig')

def generate_random_articles(n, min_id=1000000, max_id=999999999):
    return [random.randint(min_id, max_id) for _ in range(n)]

def interactive_menu():
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1. –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü)")
    print("2. –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü)")
    print("3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ —Å–ø–∏—Å–∫—É –∞—Ä—Ç–∏–∫—É–ª–æ–≤")
    print("4. –°–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã")
    print("5. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–±–æ—Ä (–≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)")
    mode = input("–í–∞—à –≤—ã–±–æ—Ä (1-5): ").strip()
    params = {}
    if mode == '1':
        params['search'] = input("–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞: ").strip()
        params['pages'] = int(input("–°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–∞—Ä—Å–∏—Ç—å (–ø–æ 100 —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É): ").strip() or DEFAULT_MAX_PAGES)
    elif mode == '2':
        params['category'] = input("URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Wildberries: ").strip()
        params['pages'] = int(input("–°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–∞—Ä—Å–∏—Ç—å: ").strip() or DEFAULT_MAX_PAGES)
    elif mode == '3':
        params['update_articles'] = input("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∞—Ä—Ç–∏–∫—É–ª–æ–≤: ").strip()
    elif mode == '4':
        params['random'] = int(input("–°–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å: ").strip())
    elif mode == '5':
        submode = input("1 ‚Äî –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á—É, 2 ‚Äî –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ").strip()
        if submode == '1':
            params['search'] = input("–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞: ").strip()
            params['all_pages'] = True
        elif submode == '2':
            params['category'] = input("URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Wildberries: ").strip()
            params['all_pages'] = True
        else:
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä!")
            sys.exit(1)
    else:
        print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä!")
        sys.exit(1)
    # –û–±—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    params['min_price'] = float(input(f"–ú–∏–Ω. —Ü–µ–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {DEFAULT_MIN_PRICE}): ").strip() or DEFAULT_MIN_PRICE)
    params['max_price'] = float(input(f"–ú–∞–∫—Å. —Ü–µ–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {DEFAULT_MAX_PRICE}): ").strip() or DEFAULT_MAX_PRICE)
    params['min_rating'] = float(input(f"–ú–∏–Ω. —Ä–µ–π—Ç–∏–Ω–≥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {DEFAULT_MIN_RATING}): ").strip() or DEFAULT_MIN_RATING)
    params['min_reviews'] = int(input(f"–ú–∏–Ω. –∫–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {DEFAULT_MIN_REVIEWS}): ").strip() or DEFAULT_MIN_REVIEWS)
    params['brand'] = input("–§–∏–ª—å—Ç—Ä –ø–æ –±—Ä–µ–Ω–¥—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ").strip() or None
    params['threads'] = int(input(f"–ü–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {cpu_count()}): ").strip() or cpu_count())
    params['out_json'] = input("–§–∞–π–ª –¥–ª—è JSON (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é results.json): ").strip() or 'results.json'
    params['out_csv'] = input("–§–∞–π–ª –¥–ª—è CSV (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é results.csv): ").strip() or 'results.csv'
    return argparse.Namespace(**params)

def process_url(args_tuple):
    url, min_price, max_price, min_rating, min_reviews, brand = args_tuple
    proxy = get_random_proxy()
    try:
        driver = get_driver(proxy, get_random_user_agent())
        data = parse_product_page(driver, url)
        driver.quit()
        if data and filter_product(data, min_price, max_price, min_rating, min_reviews, brand):
            print(f"–ü–æ–¥—Ö–æ–¥–∏—Ç: {data['product_name']} ({data['url']})")
            return data
        elif data and data['feedback_discount'] == 0:
            with open(ERROR_LOG, 'a', encoding='utf-8') as f:
                f.write(f"NO_FEEDBACK_DISCOUNT: {url}\n")
    except Exception as e:
        if proxy:
            mark_proxy_failed(proxy)
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {url}: {e}")
        with open(ERROR_LOG, 'a', encoding='utf-8') as f:
            f.write(f"ERROR: {url} | {e}\n{traceback.format_exc()}\n")
    return None

def send_progress_telegram(total, found, batch_num, total_batches, work_time):
    summary = (
        f"üì¶ <b>–ü–∞–∫–µ—Ç {batch_num}/{total_batches}</b>\n"
        f"üéØ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Å—ã–ª–æ–∫: <b>{total}</b>\n"
        f"üí∞ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö: <b>{found}</b>\n"
        f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: <b>{work_time:.1f} –º–∏–Ω</b>\n"
    )
    send_telegram_message(summary)

def save_progress(batch_num, total_batches, total, found, work_time):
    with open(PROGRESS_FILE, 'w', encoding='utf-8') as f:
        json.dump({
            'batch_num': batch_num,
            'total_batches': total_batches,
            'total': total,
            'found': found,
            'work_time': work_time
        }, f, ensure_ascii=False)

def main():
    parser = argparse.ArgumentParser(description="Wildberries –ø–∞—Ä—Å–µ—Ä —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º.")
    parser.add_argument('--search', type=str, default=None, help='–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å')
    parser.add_argument('--category', type=str, default=None, help='URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Wildberries')
    parser.add_argument('--pages', type=int, default=DEFAULT_MAX_PAGES, help='–°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–∞—Ä—Å–∏—Ç—å')
    parser.add_argument('--min-price', type=float, default=DEFAULT_MIN_PRICE, help='–ú–∏–Ω. —Ü–µ–Ω–∞')
    parser.add_argument('--max-price', type=float, default=DEFAULT_MAX_PRICE, help='–ú–∞–∫—Å. —Ü–µ–Ω–∞')
    parser.add_argument('--min-rating', type=float, default=DEFAULT_MIN_RATING, help='–ú–∏–Ω. —Ä–µ–π—Ç–∏–Ω–≥')
    parser.add_argument('--min-reviews', type=int, default=DEFAULT_MIN_REVIEWS, help='–ú–∏–Ω. –∫–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤')
    parser.add_argument('--brand', type=str, default=None, help='–§–∏–ª—å—Ç—Ä –ø–æ –±—Ä–µ–Ω–¥—É')
    parser.add_argument('--threads', type=int, default=cpu_count(), help='–ü–æ—Ç–æ–∫–æ–≤/–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞')
    parser.add_argument('--out-json', type=str, default='results.json', help='–§–∞–π–ª –¥–ª—è JSON')
    parser.add_argument('--out-csv', type=str, default='results.csv', help='–§–∞–π–ª –¥–ª—è CSV')
    parser.add_argument('--update-articles', type=str, default=None, help='–§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω')
    parser.add_argument('--random', type=int, default=None, help='–°–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')
    parser.add_argument('--all-pages', action='store_true', help='–°–æ–±–∏—Ä–∞—Ç—å –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–±–æ—Ä)')
    args, unknown = parser.parse_known_args()

    if len(sys.argv) == 1 or all(getattr(args, arg) is None for arg in vars(args)):
        args = interactive_menu()

    filter_working_proxies()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
    start_time = time.time()
    # –°–±–æ—Ä —Å—Å—ã–ª–æ–∫
    link_time = None
    if getattr(args, 'random', None):
        articles = generate_random_articles(args.random)
        product_urls = [f"https://www.wildberries.ru/catalog/{art}/detail.aspx" for art in articles]
    elif getattr(args, 'update_articles', None):
        with open(args.update_articles, encoding='utf-8') as f:
            articles = [line.strip() for line in f if line.strip()]
        product_urls = [f"https://www.wildberries.ru/catalog/{art}/detail.aspx" for art in articles]
    elif getattr(args, 'all_pages', False):
        driver = get_driver(get_random_proxy(), get_random_user_agent())
        product_urls = get_all_product_links(driver, getattr(args, 'search', None), getattr(args, 'category', None))
        driver.quit()
    elif getattr(args, 'category', None):
        driver = get_driver(get_random_proxy(), get_random_user_agent())
        product_urls = get_product_links(driver, None, args.category, args.pages)
        driver.quit()
    else:
        driver = get_driver(get_random_proxy(), get_random_user_agent())
        product_urls = get_product_links(driver, args.search or DEFAULT_SEARCH_QUERY, None, args.pages)
        driver.quit()
    product_urls = list(set(product_urls))
    log_info(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(product_urls)}")
    print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(product_urls)}")
    link_time = time.time() - start_time

    # –ú–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–∫–µ—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    results = []
    args_list = [
        (url, args.min_price, args.max_price, args.min_rating, args.min_reviews, args.brand)
        for url in product_urls
    ]
    total = len(args_list)
    total_batches = (total + BATCH_SIZE - 1) // BATCH_SIZE
    parse_start = time.time()
    for batch_num in range(total_batches):
        batch_args = args_list[batch_num*BATCH_SIZE:(batch_num+1)*BATCH_SIZE]
        batch_results = []
        with Pool(processes=args.threads) as pool:
            for data in pool.imap_unordered(process_url, batch_args):
                if data:
                    results.append(data)
                    batch_results.append(data)
        # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç—á—ë—Ç
        work_time = (time.time() - start_time) / 60
        send_progress_telegram(
            total=min((batch_num+1)*BATCH_SIZE, total),
            found=len(results),
            batch_num=batch_num+1,
            total_batches=total_batches,
            work_time=work_time
        )
        save_progress(batch_num+1, total_batches, min((batch_num+1)*BATCH_SIZE, total), len(results), work_time)
        # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    parse_time = time.time() - parse_start
    save_results(results, args.out_json, args.out_csv)
    work_time = (time.time() - start_time) / 60
    # –¢–æ–ø-5 –≤—ã–≥–æ–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    top5 = sorted(results, key=lambda d: d['discount_difference'], reverse=True)[:5]
    top5_str = '\n'.join([
        f"<a href=\"{item['url']}\">{item['product_name']}</a> (—Ä–∞–∑–Ω–∏—Ü–∞ {item['discount_difference']}‚ÇΩ)"
        for item in top5
    ])
    # –û—à–∏–±–∫–∏
    error_count = 0
    no_feedback_count = 0
    if os.path.exists(ERROR_LOG):
        with open(ERROR_LOG, encoding='utf-8') as f:
            lines = f.readlines()
            error_count = sum(1 for l in lines if l.startswith('ERROR:'))
            no_feedback_count = sum(1 for l in lines if l.startswith('NO_FEEDBACK_DISCOUNT:'))
    summary = (
        f"üìä <b>–°–≤–æ–¥–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WB</b>\n"
        f"üéØ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <b>{len(product_urls)}</b>\n"
        f"üí∞ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: <b>{len(results)}</b>\n"
        f"‚ùå –û—à–∏–±–æ–∫: <b>{error_count}</b>\n"
        f"üö´ –ë–µ–∑ —Å–∫–∏–¥–∫–∏ –∑–∞ –æ—Ç–∑—ã–≤: <b>{no_feedback_count}</b>\n"
        f"‚ôªÔ∏è –î—É–±–ª–∏–∫–∞—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–æ: <b>{len(product_urls) - len(set([d['article'] for d in results]))}</b>\n"
        f"‚è∞ –í—Ä–µ–º—è —Å–±–æ—Ä–∞ —Å—Å—ã–ª–æ–∫: <b>{link_time/60:.1f} –º–∏–Ω</b>\n"
        f"‚è∞ –í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–µ–∫: <b>{parse_time/60:.1f} –º–∏–Ω</b>\n"
        f"‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è: <b>{work_time:.1f} –º–∏–Ω</b>\n"
        f"\nüî• <b>–¢–æ–ø-5 –≤—ã–≥–æ–¥–Ω—ã—Ö:</b>\n{top5_str if top5 else '–ù–µ—Ç'}\n"
        f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω!"
    )
    send_telegram_message(summary)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if os.path.exists(ERROR_LOG):
        send_telegram_file(ERROR_LOG, caption="–õ–æ–≥ –æ—à–∏–±–æ–∫ WB –ø–∞—Ä—Å–µ—Ä–∞")
    send_telegram_file(args.out_json, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã WB –ø–∞—Ä—Å–µ—Ä–∞ (JSON)")
    send_telegram_file(args.out_csv, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã WB –ø–∞—Ä—Å–µ—Ä–∞ (CSV)")
    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {len(results)} —Ç–æ–≤–∞—Ä–æ–≤. JSON: {args.out_json}, CSV: {args.out_csv}")
    print("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram!")

if __name__ == "__main__":
    main() 