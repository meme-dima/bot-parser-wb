from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, URLInputFile, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.core.parser import get_driver, parse_product_page, get_product_links
from app.core.utils import log_info, log_error, log_warning, log_processed_item
from app.core.filters import is_matching_deal
import asyncio
import random

# --- –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
MSG_GREETING = (
    "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Wildberries. ü§ñ\n"
    "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´üìÑ –°–ø–∞—Ä—Å–∏—Ç—å —Ç–æ–≤–∞—Ä¬ª –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Wildberries.\n\n"
    "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /find_deals –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π! üîç"
)
MSG_ASK_LINK = "üîó –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Wildberries:"
MSG_PARSING_STARTED = "‚öôÔ∏è –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è: {url}\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏..."
MSG_ASK_SEARCH_QUERY = "üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏'):"
MSG_EMPTY_SEARCH_QUERY = "‚ö†Ô∏è –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:"
MSG_ASK_MIN_PRICE = "üí∞ –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-', —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:"
MSG_INVALID_MIN_PRICE_FORMAT = "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:"
MSG_ASK_MAX_PRICE = "üí∞ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 300) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-', —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:"
MSG_INVALID_MAX_PRICE_FORMAT = "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:"
MSG_MAX_PRICE_LESS_THAN_MIN = "üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ '-':"
MSG_ASK_NUM_PAGES = "üìÑ –°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å? (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 3)"
MSG_INVALID_NUM_PAGES_POSITIVE = "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
MSG_INVALID_NUM_PAGES_FORMAT = "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3):"
MSG_SEARCH_STARTED = "–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{search_query}' –Ω–∞ {num_pages_to_check} —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
MSG_NO_LINKS_FOUND = "ü§∑‚Äç‚ôÇÔ∏è –ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–∞–Ω–∏—Ü."
MSG_LINKS_FOUND_START_PROCESSING = "–ù–∞–π–¥–µ–Ω–æ {count} —Ç–æ–≤–∞—Ä–æ–≤. –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è..."
MSG_ITEMS_CHECKED_PROGRESS = "–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {checked} –∏–∑ {total} —Ç–æ–≤–∞—Ä–æ–≤..."
MSG_SEARCH_COMPLETED = "üéâ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!\n–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {processed} –∏–∑ {total_links}.\n–ù–∞–π–¥–µ–Ω–æ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {deals_count} üèÅ"
MSG_CAPTCHA_DETECTED = "üõ°Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {url}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
MSG_PARSE_ERROR_DEBUG_HTML = "üêû –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è: {url}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ debug_wb.html. {message}"
MSG_DATA_NOT_FOUND = "‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è: {url}. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∏–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
MSG_CRITICAL_ERROR_PROCESSING_LINK = "üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {url}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
MSG_ERROR_GETTING_LINKS = "üï∏Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
MSG_DRIVER_INIT_FAILED_FOR_ITEMS = "üöó‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–∏—Å–∫ –ø—Ä–µ—Ä–≤–∞–Ω."
MSG_ERROR_IN_ITEM_PROCESSING_LOOP = "üîÑ‚ö†Ô∏è –í–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∏—Å–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º."
MSG_PRODUCT_UNAVAILABLE = "üö´ –¢–æ–≤–∞—Ä –ø–æ —Å—Å—ã–ª–∫–µ {url} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ä–∞—Å–ø—Ä–æ–¥–∞–Ω/—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞). –°–æ–æ–±—â–µ–Ω–∏–µ: {message}"
MSG_ESSENTIAL_DATA_MISSING = "üß© –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–∑–≤–∞–Ω–∏–µ/—Ü–µ–Ω–∞) –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {url}. {message}"

# –ù–æ–≤—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
MSG_SEARCH_PROCESSING_PROMPT = "‚è≥ –ü–æ–∏—Å–∫ –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ üëá"
BTN_SHOW_STATS = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞"
BTN_STOP_SEARCH = "‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫"
MSG_SEARCH_STOP_REQUESTED = "‚è≥ –ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫..."
MSG_SEARCH_STOPPED_BY_USER = "üõë –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
MSG_SEARCH_STATS_FORMAT = (
    "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞:</b>\n\n"
    "üîç –ó–∞–ø—Ä–æ—Å: <code>{query}</code>\n"
    "üí∞ –¶–µ–Ω–∞: –æ—Ç {min_price} –¥–æ {max_price}\n"
    "üìÑ –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {total_links}\n"
    "üîÑ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {processed_count} –∏–∑ {total_links}\n"
    "üî• –ù–∞–π–¥–µ–Ω–æ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {deals_found}"
)
STATS_UNAVAILABLE = "‚ÑπÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –ø–æ–∏—Å–∫ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω."

DEAL_ALERT_PREFIX = "üî• <b>–í–´–ì–û–î–ù–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï!</b> –¶–µ–Ω–∞ –Ω–∏–∂–µ —Å–∫–∏–¥–∫–∏ –∑–∞ –æ—Ç–∑—ã–≤!\n"

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ª–æ–≥–∏–∫–∏ ---
WB_URL_REGEX = r"https://www\.wildberries\.ru/catalog/\d+/detail\.aspx"
# PROGRESS_UPDATE_INTERVAL = 10 # –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç

router = Router()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π ---
class FindDealsStates(StatesGroup):
    waiting_for_query = State()
    waiting_for_min_price = State()
    waiting_for_max_price = State()
    waiting_for_pages = State()
    processing_items = State() # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ --- 
BTN_PARSE_SINGLE_ITEM = "üìÑ –°–ø–∞—Ä—Å–∏—Ç—å —Ç–æ–≤–∞—Ä"
BTN_FIND_DEALS_MAIN = "üîç –ù–∞–π—Ç–∏ –≤—ã–≥–æ–¥–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text=BTN_PARSE_SINGLE_ITEM)],
        [KeyboardButton(text=BTN_FIND_DEALS_MAIN)] # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
search_stats_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text=BTN_SHOW_STATS)],
        [KeyboardButton(text=BTN_STOP_SEARCH)]
    ],
    resize_keyboard=True
)

async def _send_formatted_product_message(message: Message, product_data: dict, product_url: str, deal_alert_prefix: str = ""):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–≤–∞—Ä–µ."""
    current_price = product_data.get('current_price', 0.0)
    second_price = product_data.get('second_price', 0.0)
    feedback_discount = product_data.get('feedback_discount', 0.0)

    price_info = f"<b>–¶–µ–Ω–∞:</b> {current_price} ‚ÇΩ\n"
    if second_price > 0 and abs(second_price - current_price) > 0.01:
        price_info += f"<b>–û–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞:</b> {second_price} ‚ÇΩ\n"
    if feedback_discount > 0:
        price_info += f"<b>–°–∫–∏–¥–∫–∞ –∑–∞ –æ—Ç–∑—ã–≤:</b> {feedback_discount} ‚ÇΩ\n"

    response_text = (
        f"{deal_alert_prefix}"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product_data.get('product_name', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        f"{price_info}"
        f"<b>–ë—Ä–µ–Ω–¥:</b> {product_data.get('brand', '–ù–µ –Ω–∞–π–¥–µ–Ω')}\n"
        f"<b>–†–µ–π—Ç–∏–Ω–≥:</b> {product_data.get('rating', 0.0)} ({product_data.get('reviews', 0)} –æ—Ç–∑—ã–≤–æ–≤)\n"
        f"<a href='{product_url}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</a>"
    )

    if product_data.get("images"):
        try:
            image_url = product_data["images"][0]
            await message.answer_photo(photo=URLInputFile(image_url), caption=response_text, parse_mode="HTML")
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è {product_url}: {e}")
            await message.answer(response_text, parse_mode="HTML", disable_web_page_preview=True)
    else:
        await message.answer(response_text, parse_mode="HTML", disable_web_page_preview=True)


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext): # –î–æ–±–∞–≤–∏–ª state –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è, —Ö–æ—Ç—è –æ–Ω —Ç—É—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –∫–∞–∫–æ–º-—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –æ—á–∏—Å—Ç–∏–º –µ–≥–æ –ø—Ä–∏ /start
    await state.clear()
    await message.answer(MSG_GREETING, reply_markup=main_kb)

@router.message(F.text == BTN_PARSE_SINGLE_ITEM) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
async def ask_link(message: Message):
    await message.answer(MSG_ASK_LINK)

@router.message(F.text.regexp(WB_URL_REGEX))
async def process_link(message: Message):
    url = message.text
    processing_message = await message.answer(MSG_PARSING_STARTED.format(url=url))
    log_info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {url}")

    driver_instance = None
    try:
        def run_parser_sync(u):
            nonlocal driver_instance
            try:
                driver_instance = get_driver()
                data = parse_product_page(driver_instance, u)
                return data
            finally:
                if driver_instance:
                    driver_instance.quit()
                    driver_instance = None
        
        data = await asyncio.to_thread(run_parser_sync, url)

        if data and data.get("product_name"):
            deal_alert_text = ""
            current_price = data.get('current_price', 0.0)
            feedback_discount = data.get('feedback_discount', 0.0)
            if feedback_discount > 0 and current_price > 0 and current_price < feedback_discount:
                deal_alert_text = DEAL_ALERT_PREFIX
            await _send_formatted_product_message(message, data, url, deal_alert_text)
        
        elif data and data.get("status") == "captcha_detected":
             await message.answer(MSG_CAPTCHA_DETECTED.format(url=url))
        elif data and data.get("status") == "parse_error":
            await message.answer(MSG_PARSE_ERROR_DEBUG_HTML.format(url=url, message=data.get('message', '')))
        elif data and data.get("status") == "product_unavailable":
            await message.answer(MSG_PRODUCT_UNAVAILABLE.format(url=url, message=data.get('message', '')))
        elif data and data.get("status") == "essential_data_missing":
            await message.answer(MSG_ESSENTIAL_DATA_MISSING.format(url=url, message=data.get('message', '')))
        else:
            await message.answer(MSG_DATA_NOT_FOUND.format(url=url))
            log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {url}. –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–µ—Ä–∞: {data}")

    except Exception as e:
        log_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ {url} –≤ –±–æ—Ç–µ: {type(e).__name__} - {e}")
        await message.answer(MSG_CRITICAL_ERROR_PROCESSING_LINK.format(url=url))
    finally:
        if processing_message:
            try:
                await processing_message.delete()
            except Exception:
                pass
        if driver_instance:
            log_warning(f"–î—Ä–∞–π–≤–µ—Ä –Ω–µ –±—ã–ª –∑–∞–∫—Ä—ã—Ç –≤ –ø–æ—Ç–æ–∫–µ –¥–ª—è {url}. –ó–∞–∫—Ä—ã–≤–∞—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ.")
            driver_instance.quit()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è /find_deals –∏ –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏
@router.message(Command("find_deals"))
@router.message(F.text == BTN_FIND_DEALS_MAIN) # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏
async def cmd_find_deals_start(message: Message, state: FSMContext):
    await message.answer(MSG_ASK_SEARCH_QUERY)
    await state.set_state(FindDealsStates.waiting_for_query)

@router.message(FindDealsStates.waiting_for_query)
async def process_search_query(message: Message, state: FSMContext):
    search_query = message.text.strip()
    if not search_query:
        await message.answer(MSG_EMPTY_SEARCH_QUERY)
        return
    await state.update_data(search_query=search_query)
    await message.answer(MSG_ASK_MIN_PRICE)
    await state.set_state(FindDealsStates.waiting_for_min_price)

@router.message(FindDealsStates.waiting_for_min_price)
async def process_min_price(message: Message, state: FSMContext):
    min_price_str = message.text.strip()
    min_price = None
    if min_price_str == '-':
        pass
    else:
        try:
            min_price = float(min_price_str)
            if min_price < 0:
                await message.answer(MSG_INVALID_MIN_PRICE_FORMAT)
                return
        except ValueError:
            await message.answer(MSG_INVALID_MIN_PRICE_FORMAT)
            return
    
    await state.update_data(min_price=min_price)
    await message.answer(MSG_ASK_MAX_PRICE)
    await state.set_state(FindDealsStates.waiting_for_max_price)

@router.message(FindDealsStates.waiting_for_max_price)
async def process_max_price(message: Message, state: FSMContext):
    max_price_str = message.text.strip()
    max_price = None
    user_data = await state.get_data()
    min_price = user_data.get('min_price')

    if max_price_str == '-':
        pass
    else:
        try:
            max_price = float(max_price_str)
            if max_price < 0:
                await message.answer(MSG_INVALID_MAX_PRICE_FORMAT)
                return
            if min_price is not None and max_price < min_price:
                await message.answer(MSG_MAX_PRICE_LESS_THAN_MIN)
                return
        except ValueError:
            await message.answer(MSG_INVALID_MAX_PRICE_FORMAT)
            return
            
    await state.update_data(max_price=max_price)
    await message.answer(MSG_ASK_NUM_PAGES)
    await state.set_state(FindDealsStates.waiting_for_pages)

@router.message(FindDealsStates.waiting_for_pages)
async def process_all_filters_and_search(message: Message, state: FSMContext):
    try:
        num_pages_to_check = int(message.text.strip())
        if num_pages_to_check <= 0:
            await message.answer(MSG_INVALID_NUM_PAGES_POSITIVE, reply_markup=main_kb)
            await state.clear()
            return
    except ValueError:
        await message.answer(MSG_INVALID_NUM_PAGES_FORMAT, reply_markup=main_kb)
        await state.clear()
        return

    user_data_for_search = await state.get_data()
    search_query = user_data_for_search.get("search_query")
    min_price = user_data_for_search.get("min_price")
    max_price = user_data_for_search.get("max_price")
    
    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö

    initial_message_text = (
        f"üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{search_query}'\\n"
        f"üí∞ –¶–µ–Ω–∞ –æ—Ç: {'–Ω–µ —É–∫–∞–∑–∞–Ω–∞' if min_price is None else min_price} –¥–æ {'–Ω–µ —É–∫–∞–∑–∞–Ω–∞' if max_price is None else max_price}\\n"
        f"üìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü: {num_pages_to_check}\\n\\n"
        "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è..."
    )
    await message.answer(initial_message_text)

    links_driver_instance = None
    product_links = []
    processed_items_count_local = 0
    deals_found_count_local = 0

    try:
        def get_links_threaded(query, num_pages, p_min, p_max):
            nonlocal links_driver_instance
            try:
                log_info(f"–ó–∞–ø—É—Å–∫–∞—é get_driver –¥–ª—è get_product_links —Å –∑–∞–ø—Ä–æ—Å–æ–º: {query}, –º–∏–Ω.—Ü–µ–Ω–∞: {p_min}, –º–∞–∫—Å.—Ü–µ–Ω–∞: {p_max}")
                links_driver_instance = get_driver()
                log_info(f"–î—Ä–∞–π–≤–µ—Ä –¥–ª—è get_product_links –ø–æ–ª—É—á–µ–Ω. –ó–∞–ø—É—Å–∫–∞—é get_product_links.")
                found_links = get_product_links(links_driver_instance, 
                                                search_query=query, 
                                                max_pages=num_pages, 
                                                min_price_rub=p_min, 
                                                max_price_rub=p_max)
                log_info(f"get_product_links –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(found_links)}")
                return found_links
            finally:
                if links_driver_instance:
                    log_info("–ó–∞–∫—Ä—ã–≤–∞—é –¥—Ä–∞–π–≤–µ—Ä –ø–æ—Å–ª–µ get_product_links.")
                    links_driver_instance.quit()
                    links_driver_instance = None
        
        product_links = await asyncio.to_thread(get_links_threaded, search_query, num_pages_to_check, min_price, max_price)
        log_info(f"–ù–∞–π–¥–µ–Ω–æ {len(product_links)} —Å—Å—ã–ª–æ–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' (—Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞ —Ü–µ–Ω priceU). –°—Å—ã–ª–∫–∏: {product_links if len(product_links) < 10 else str(product_links[:10]) + '...'}")

    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –¥–ª—è '{search_query}': {type(e).__name__} - {e}")
        await message.answer(MSG_ERROR_GETTING_LINKS, reply_markup=main_kb)
        return # —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ –æ—á–∏—â–µ–Ω–æ –≤—ã—à–µ
    
    if not product_links:
        await message.answer(MSG_NO_LINKS_FOUND.format(search_query=search_query), reply_markup=main_kb)
        return # —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ –æ—á–∏—â–µ–Ω–æ –≤—ã—à–µ

    await state.set_state(FindDealsStates.processing_items)
    await state.update_data(
        search_query_for_stats=search_query,
        min_price_for_stats=min_price,
        max_price_for_stats=max_price,
        total_links_for_stats=len(product_links),
        processed_items_count_stats=0,
        deals_found_count_stats=0,
        cancel_requested=False # –§–ª–∞–≥ –¥–ª—è –æ—Ç–º–µ–Ω—ã
    )
    await message.answer(MSG_SEARCH_PROCESSING_PROMPT, reply_markup=search_stats_kb)
    
    item_parser_driver_instance_main = None
    try:
        log_info(f"–°–æ–∑–¥–∞—é –æ—Å–Ω–æ–≤–Ω–æ–π –¥—Ä–∞–π–≤–µ—Ä –¥–ª—è —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {len(product_links)} —Ç–æ–≤–∞—Ä–æ–≤.")
        item_parser_driver_instance_main = get_driver()
        if not item_parser_driver_instance_main:
            await message.answer(MSG_DRIVER_INIT_FAILED_FOR_ITEMS, reply_markup=main_kb)
            log_error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –¥—Ä–∞–π–≤–µ—Ä –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.")
            current_fsm_state_init_fail = await state.get_state()
            if current_fsm_state_init_fail == FindDealsStates.processing_items.state: # –û—á–∏—â–∞–µ–º, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ
                 await state.clear()
            return

        for i, product_url in enumerate(product_links):
            current_fsm_data = await state.get_data() # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ FSM
            if current_fsm_data.get("cancel_requested"):
                await message.answer(MSG_SEARCH_STOPPED_BY_USER, reply_markup=main_kb)
                break 

            log_processed_item(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL: {product_url}")
            try:
                def run_single_item_parser_sync_reuse_driver(driver_to_use, url_to_parse):
                    data = parse_product_page(driver_to_use, url_to_parse)
                    return data
                
                data = await asyncio.to_thread(run_single_item_parser_sync_reuse_driver, item_parser_driver_instance_main, product_url)
                processed_items_count_local += 1

                if data and data.get("product_name"):
                    log_processed_item(f"–£—Å–ø–µ—à–Ω–æ: {product_url} - {data.get('product_name')}")
                    if is_matching_deal(data, user_min_price=min_price, user_max_price=max_price): # –ò—Å–ø–æ–ª—å–∑—É–µ–º min_price, max_price –∏–∑ –∑–∞–º—ã–∫–∞–Ω–∏—è
                        deals_found_count_local += 1
                        await _send_formatted_product_message(message, data, product_url, DEAL_ALERT_PREFIX)
                elif data and data.get("status") == "captcha_detected": # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å
                    log_warning(f"–ö–∞–ø—á–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {product_url} –≤ —Ü–∏–∫–ª–µ.")
                elif data and data.get("status") == "product_unavailable": # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å
                    log_warning(f"–¢–æ–≤–∞—Ä {product_url} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ü–∏–∫–ª–µ: {data.get('message', '')}")
                elif data and data.get("status") == "essential_data_missing": # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å
                    log_warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {product_url} –≤ —Ü–∏–∫–ª–µ: {data.get('message', '')}")
                else: # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å
                    log_warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {product_url} –≤ —Ü–∏–∫–ª–µ. –†–µ–∑—É–ª—å—Ç–∞—Ç: {data}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ FSM
                current_fsm_state_in_loop = await state.get_state() 
                if current_fsm_state_in_loop == FindDealsStates.processing_items.state:
                    await state.update_data(processed_items_count_stats=processed_items_count_local, deals_found_count_stats=deals_found_count_local)
                else: 
                    log_warning(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ ({current_fsm_state_in_loop}), –ø—Ä–µ—Ä—ã–≤–∞—é –ø–æ–∏—Å–∫.")
                    await message.answer("–ü–æ–∏—Å–∫ –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ —Å–º–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã.", reply_markup=main_kb)
                    break
            except Exception as e_item:
                log_error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {product_url}: {type(e_item).__name__} - {e_item}")

    except Exception as e_main_loop:
        log_error(f"–ì–ª–∞–≤–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: {type(e_main_loop).__name__} - {e_main_loop}")
        await message.answer(MSG_ERROR_IN_ITEM_PROCESSING_LOOP, reply_markup=main_kb)
        # –ï—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ processing_items —Ç–æ–∂–µ –Ω–∞–¥–æ –æ—á–∏—Å—Ç–∏—Ç—å
        current_fsm_state_on_error = await state.get_state()
        if current_fsm_state_on_error == FindDealsStates.processing_items.state:
            await state.clear()
    finally:
        if item_parser_driver_instance_main:
            log_info("–ó–∞–∫—Ä—ã–≤–∞—é –æ—Å–Ω–æ–≤–Ω–æ–π –¥—Ä–∞–π–≤–µ—Ä –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞.")
            item_parser_driver_instance_main.quit()
        
        await message.answer(
            MSG_SEARCH_COMPLETED.format(
                processed=processed_items_count_local, 
                total_links=len(product_links),
                deals_count=deals_found_count_local
            ),
            reply_markup=main_kb
        )
        current_fsm_state_finally = await state.get_state()
        if current_fsm_state_finally == FindDealsStates.processing_items.state:
            await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫"
@router.message(FindDealsStates.processing_items, F.text == BTN_STOP_SEARCH)
async def cmd_stop_search(message: Message, state: FSMContext):
    await state.update_data(cancel_requested=True)
    await message.answer(MSG_SEARCH_STOP_REQUESTED, reply_markup=ReplyKeyboardRemove())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@router.message(FindDealsStates.processing_items, F.text == BTN_SHOW_STATS)
async def show_search_stats(message: Message, state: FSMContext):
    stats_data = await state.get_data()
    if not stats_data or 'total_links_for_stats' not in stats_data:
        await message.answer(STATS_UNAVAILABLE, reply_markup=main_kb)
        current_fsm_state_no_data = await state.get_state()
        if current_fsm_state_no_data == FindDealsStates.processing_items.state:
            await state.clear()
        return

    query = stats_data.get('search_query_for_stats', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    min_p = stats_data.get('min_price_for_stats')
    max_p = stats_data.get('max_price_for_stats')
    total = stats_data.get('total_links_for_stats', 0)
    processed = stats_data.get('processed_items_count_stats', 0)
    deals = stats_data.get('deals_found_count_stats', 0)
    last_stats_message_id = stats_data.get('last_stats_message_id')

    min_p_str = str(min_p) if min_p is not None else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'
    max_p_str = str(max_p) if max_p is not None else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'

    text_to_send = MSG_SEARCH_STATS_FORMAT.format(
        query=query,
        min_price=min_p_str,
        max_price=max_p_str,
        total_links=total,
        processed_count=processed,
        deals_found=deals
    )

    try:
        if last_stats_message_id:
            await message.bot.edit_message_text(
                text=text_to_send,
                chat_id=message.chat.id,
                message_id=last_stats_message_id,
                parse_mode="HTML",
                reply_markup=search_stats_kb
            )
            # –ï—Å–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏, —Ç–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏) –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ "–ª–∏—à–Ω–µ–≥–æ"
            # await message.delete() # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        else:
            sent_message = await message.answer(text_to_send, parse_mode="HTML", reply_markup=search_stats_kb)
            await state.update_data(last_stats_message_id=sent_message.message_id)
    except Exception as e: # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ)
        log_warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (ID: {last_stats_message_id}): {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ.")
        sent_message = await message.answer(text_to_send, parse_mode="HTML", reply_markup=search_stats_kb)
        await state.update_data(last_stats_message_id=sent_message.message_id)

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ router.include_router(other_router) –∏–ª–∏ dp.include_router(router) –µ—Å—Ç—å –≤ main.py –∏–ª–∏ app.py 