from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, URLInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.core.parser import get_driver, parse_product_page, get_product_links
from app.core.utils import log_info, log_error, log_warning, log_processed_item
import asyncio
import random

# --- –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
MSG_GREETING = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Wildberries. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä.\n\n"
    "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /find_deals –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π!"
)
MSG_ASK_LINK = "–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Wildberries:"
MSG_PARSING_STARTED = "–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è: {url}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏..."
MSG_ASK_SEARCH_QUERY = "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—ã–≥–æ–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏'):"
MSG_EMPTY_SEARCH_QUERY = "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:"
MSG_ASK_NUM_PAGES = "–°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å? (–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 3)"
MSG_INVALID_NUM_PAGES_POSITIVE = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
MSG_INVALID_NUM_PAGES_FORMAT = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3):"
MSG_SEARCH_STARTED = "–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{search_query}' –Ω–∞ {num_pages_to_check} —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
MSG_SEARCH_STARTED_PARALLEL = "–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{search_query}' –Ω–∞ {num_pages_to_check} —Å—Ç—Ä. –ó–∞–ø—É—Å–∫–∞—é {worker_count} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è {link_count} —Å—Å—ã–ª–æ–∫..."
MSG_NO_LINKS_FOUND = "–ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–∞–Ω–∏—Ü."
MSG_LINKS_FOUND_START_PROCESSING = "–ù–∞–π–¥–µ–Ω–æ {count} —Ç–æ–≤–∞—Ä–æ–≤. –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è..."
MSG_ITEMS_CHECKED_PROGRESS = "–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {checked} –∏–∑ {total} —Ç–æ–≤–∞—Ä–æ–≤..."
MSG_SEARCH_COMPLETED = "–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {processed} –∏–∑ {total_links}. –ù–∞–π–¥–µ–Ω–æ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {deals_count}."
MSG_CAPTCHA_DETECTED = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {url}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É."
MSG_PARSE_ERROR_DEBUG_HTML = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è: {url}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ debug_wb.html. {message}"
MSG_DATA_NOT_FOUND = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è: {url}. –í–æ–∑–º–æ–∂–Ω–æ, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Ç–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞."
MSG_CRITICAL_ERROR_PROCESSING_LINK = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {url}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
MSG_ERROR_GETTING_LINKS = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
MSG_DRIVER_INIT_FAILED_FOR_ITEMS = "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–∏—Å–∫ –ø—Ä–µ—Ä–≤–∞–Ω."
MSG_ERROR_IN_ITEM_PROCESSING_LOOP = "–í–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∏—Å–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º."
MSG_PRODUCT_UNAVAILABLE = "–¢–æ–≤–∞—Ä –ø–æ —Å—Å—ã–ª–∫–µ {url} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç). –°–æ–æ–±—â–µ–Ω–∏–µ: {message}"
MSG_ESSENTIAL_DATA_MISSING = "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–∑–≤–∞–Ω–∏–µ/—Ü–µ–Ω–∞) –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {url}. {message}"

DEAL_ALERT_PREFIX = "üî• <b>–í–´–ì–û–î–ù–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï!</b> –¶–µ–Ω–∞ –Ω–∏–∂–µ —Å–∫–∏–¥–∫–∏ –∑–∞ –æ—Ç–∑—ã–≤!\n"

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ª–æ–≥–∏–∫–∏ ---
WB_URL_REGEX = r"https://www\.wildberries\.ru/catalog/\d+/detail\.aspx"
MAX_CONCURRENT_PARSERS = 4 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤

router = Router()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π ---
class FindDealsStates(StatesGroup):
    waiting_for_query = State()
    waiting_for_pages = State()

main_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–°–ø–∞—Ä—Å–∏—Ç—å —Ç–æ–≤–∞—Ä")]],
    resize_keyboard=True,
    input_field_placeholder="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É"
)

async def _send_formatted_product_message(message: Message, product_data: dict, product_url: str, deal_alert_prefix: str = ""):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–≤–∞—Ä–µ."""
    current_price = product_data.get('current_price', 0.0)
    second_price = product_data.get('second_price', 0.0)
    feedback_discount = product_data.get('feedback_discount', 0.0)

    price_info = f"<b>–¶–µ–Ω–∞:</b> {current_price} ‚ÇΩ\n"
    if second_price > 0 and abs(second_price - current_price) > 0.01:
        price_info += f"<b>–û–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞:</b> {second_price} ‚ÇΩ\n"
    if feedback_discount > 0:
        price_info += f"<b>–°–∫–∏–¥–∫–∞ –∑–∞ –æ—Ç–∑—ã–≤:</b> {feedback_discount} ‚ÇΩ\n"

    response_text = (
        f"{deal_alert_prefix}"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product_data.get('product_name', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        f"{price_info}"
        f"<b>–ë—Ä–µ–Ω–¥:</b> {product_data.get('brand', '–ù–µ –Ω–∞–π–¥–µ–Ω')}\n"
        f"<b>–†–µ–π—Ç–∏–Ω–≥:</b> {product_data.get('rating', 0.0)} ({product_data.get('reviews', 0)} –æ—Ç–∑—ã–≤–æ–≤)\n"
        f"<a href='{product_url}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</a>"
    )

    if product_data.get("images"):
        try:
            image_url = product_data["images"][0]
            await message.answer_photo(photo=URLInputFile(image_url), caption=response_text, parse_mode="HTML")
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è {product_url}: {e}")
            await message.answer(response_text, parse_mode="HTML", disable_web_page_preview=True)
    else:
        await message.answer(response_text, parse_mode="HTML", disable_web_page_preview=True)


@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(MSG_GREETING, reply_markup=main_kb)

@router.message(F.text == "–°–ø–∞—Ä—Å–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def ask_link(message: Message):
    await message.answer(MSG_ASK_LINK)

@router.message(F.text.regexp(WB_URL_REGEX))
async def process_link(message: Message):
    url = message.text
    processing_message = await message.answer(MSG_PARSING_STARTED.format(url=url))
    log_info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {url}")

    driver_instance = None
    try:
        def run_parser_sync(u):
            nonlocal driver_instance
            try:
                driver_instance = get_driver()
                if not driver_instance: return {"status": "driver_init_error", "url": u}
                data = parse_product_page(driver_instance, u)
                return data
            finally:
                if driver_instance:
                    driver_instance.quit()
                    driver_instance = None
        
        data = await asyncio.to_thread(run_parser_sync, url)

        if data and data.get("product_name"):
            deal_alert_text = ""
            current_price = data.get('current_price', 0.0)
            feedback_discount = data.get('feedback_discount', 0.0)
            if feedback_discount > 0 and current_price > 0 and current_price < feedback_discount:
                deal_alert_text = DEAL_ALERT_PREFIX
            await _send_formatted_product_message(message, data, url, deal_alert_text)
        
        elif data and data.get("status") == "captcha_detected":
             await message.answer(MSG_CAPTCHA_DETECTED.format(url=url))
        elif data and data.get("status") == "parse_error":
            await message.answer(MSG_PARSE_ERROR_DEBUG_HTML.format(url=url, message=data.get('message', '')))
        elif data and data.get("status") == "product_unavailable":
            await message.answer(MSG_PRODUCT_UNAVAILABLE.format(url=url, message=data.get('message', '')))
        elif data and data.get("status") == "essential_data_missing":
            await message.answer(MSG_ESSENTIAL_DATA_MISSING.format(url=url, message=data.get('message', '')))
        elif data and data.get("status") == "driver_init_error":
            await message.answer(MSG_DRIVER_INIT_FAILED_FOR_ITEMS) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –º–µ—Å—Å–µ–¥–∂
        else:
            await message.answer(MSG_DATA_NOT_FOUND.format(url=url))
            log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {url}. –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–µ—Ä–∞: {data}")

    except Exception as e:
        log_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ {url} –≤ –±–æ—Ç–µ: {type(e).__name__} - {e}")
        await message.answer(MSG_CRITICAL_ERROR_PROCESSING_LINK.format(url=url))
    finally:
        if processing_message:
            try:
                await processing_message.delete()
            except Exception:
                pass
        if driver_instance: # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤ run_parser_sync —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –¥–æ finally
            log_warning(f"–î—Ä–∞–π–≤–µ—Ä –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–π —Å—Å—ã–ª–∫–∏ {url} –Ω–µ –±—ã–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç –≤ –ø–æ—Ç–æ–∫–µ. –ó–∞–∫—Ä—ã–≤–∞—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ.")
            driver_instance.quit()

# --- –õ–æ–≥–∏–∫–∞ –¥–ª—è /find_deals —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º ---
async def parse_item_worker(product_url: str, message: Message, semaphore: asyncio.Semaphore) -> dict:
    """–†–∞–±–æ—á–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–≥–æ URL. –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–∏–º –¥—Ä–∞–π–≤–µ—Ä–æ–º."""
    async with semaphore: # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –¥—Ä–∞–π–≤–µ—Ä–æ–≤
        log_processed_item(f"Worker: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL: {product_url}")
        driver = None
        data = None
        try:
            # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ get_driver –∏ parse_product_page –≤—ã–ø–æ–ª–Ω—è–µ–º –≤ –ø–æ—Ç–æ–∫–µ
            def sync_parse_operations(url_to_parse):
                d = get_driver()
                if not d:
                    log_error(f"Worker: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä –¥–ª—è {url_to_parse}")
                    return {"status": "driver_init_error", "url": url_to_parse, "product_name": None}
                try:
                    parsed_data = parse_product_page(d, url_to_parse)
                    return parsed_data
                finally:
                    d.quit()
            
            data = await asyncio.to_thread(sync_parse_operations, product_url)

            if data and data.get("product_name"):
                log_processed_item(f"Worker: –£—Å–ø–µ—à–Ω–æ {product_url} - {data.get('product_name')}")
                current_price = data.get('current_price', 0.0)
                feedback_discount = data.get('feedback_discount', 0.0)
                is_deal = feedback_discount > 0 and current_price > 0 and current_price < feedback_discount
                if is_deal:
                    await _send_formatted_product_message(message, data, product_url, DEAL_ALERT_PREFIX)
                return {"status": "success", "is_deal": is_deal, "processed": True}
            
            elif data:
                status = data.get("status", "unknown_error")
                err_msg = data.get("message", "")
                log_warning(f"Worker: –ü—Ä–æ–±–ª–µ–º–∞ —Å {product_url}. –°—Ç–∞—Ç—É—Å: {status}. –°–æ–æ–±—â–µ–Ω–∏–µ: {err_msg}")
                log_processed_item(f"Worker: {status.capitalize()} {product_url} - {err_msg}")
                return {"status": status, "is_deal": False, "processed": True} # –°—á–∏—Ç–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º, –¥–∞–∂–µ –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
            else:
                # –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å, –µ—Å–ª–∏ sync_parse_operations –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict
                log_error(f"Worker: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è {product_url}")
                log_processed_item(f"Worker: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö {product_url}")
                return {"status": "no_data_from_parser", "is_deal": False, "processed": True}

        except Exception as e_worker:
            log_error(f"Worker: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {product_url}: {type(e_worker).__name__} - {e_worker}")
            log_processed_item(f"Worker: –ö—Ä–∏—Ç. –æ—à–∏–±–∫–∞ {product_url} - {type(e_worker).__name__}")
            return {"status": "worker_critical_error", "is_deal": False, "processed": False} # –ù–µ —Å—á–∏—Ç–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –ø—Ä–∏ –∫—Ä–∏—Ç. –æ—à–∏–±–∫–µ worker-–∞
        finally:
            log_processed_item(f"Worker: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL: {product_url}")
            # –î—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ sync_parse_operations

@router.message(Command("find_deals"))
async def cmd_find_deals_start(message: Message, state: FSMContext):
    await message.answer(MSG_ASK_SEARCH_QUERY)
    await state.set_state(FindDealsStates.waiting_for_query)

@router.message(FindDealsStates.waiting_for_query)
async def process_search_query(message: Message, state: FSMContext):
    search_query = message.text.strip()
    if not search_query:
        await message.answer(MSG_EMPTY_SEARCH_QUERY)
        return
    await state.update_data(search_query=search_query)
    await message.answer(MSG_ASK_NUM_PAGES)
    await state.set_state(FindDealsStates.waiting_for_pages)

@router.message(FindDealsStates.waiting_for_pages)
async def process_num_pages_and_search(message: Message, state: FSMContext):
    try:
        num_pages_to_check = int(message.text.strip())
        if num_pages_to_check <= 0:
            await message.answer(MSG_INVALID_NUM_PAGES_POSITIVE)
            return
    except ValueError:
        await message.answer(MSG_INVALID_NUM_PAGES_FORMAT)
        return

    user_data = await state.get_data()
    search_query = user_data.get("search_query")
    await state.clear()

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏, —ç—Ç–æ –≤—Å–µ –µ—â–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å –æ–¥–Ω–∏–º –¥—Ä–∞–π–≤–µ—Ä–æ–º
    await message.answer(MSG_SEARCH_STARTED.format(search_query=search_query, num_pages_to_check=num_pages_to_check))
    links_driver_instance = None
    product_links = []
    try:
        def get_links_threaded_sync(query, num_pages):
            nonlocal links_driver_instance
            try:
                log_info(f"–ó–∞–ø—É—Å–∫–∞—é get_driver –¥–ª—è get_product_links —Å –∑–∞–ø—Ä–æ—Å–æ–º: {query}")
                links_driver_instance = get_driver()
                if not links_driver_instance:
                    log_error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫.")
                    return [] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–∏–∂–µ
                found_links = get_product_links(links_driver_instance, search_query=query, max_pages=num_pages)
                log_info(f"get_product_links –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(found_links)}")
                return found_links
            finally:
                if links_driver_instance:
                    log_info("–ó–∞–∫—Ä—ã–≤–∞—é –¥—Ä–∞–π–≤–µ—Ä –ø–æ—Å–ª–µ get_product_links.")
                    links_driver_instance.quit()
                    links_driver_instance = None
        
        product_links = await asyncio.to_thread(get_links_threaded_sync, search_query, num_pages_to_check)

    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –¥–ª—è '{search_query}': {type(e).__name__} - {e}")
        await message.answer(MSG_ERROR_GETTING_LINKS)
        return # –í—ã—Ö–æ–¥, –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã
    
    if not product_links:
        await message.answer(MSG_NO_LINKS_FOUND.format(search_query=search_query))
        return

    log_info(f"–ù–∞–π–¥–µ–Ω–æ {len(product_links)} —Å—Å—ã–ª–æ–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}'. –ü–µ—Ä–≤—ã–µ 10: {product_links[:10]}")
    await message.answer(MSG_SEARCH_STARTED_PARALLEL.format(search_query=search_query, num_pages_to_check=num_pages_to_check, worker_count=MAX_CONCURRENT_PARSERS, link_count=len(product_links)))
    
    deals_found_count = 0
    processed_items_count = 0
    tasks = []
    semaphore = asyncio.Semaphore(MAX_CONCURRENT_PARSERS)

    for product_url in product_links:
        task = parse_item_worker(product_url, message, semaphore)
        tasks.append(task)
    
    results = []
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks)
    except Exception as e_gather:
        log_error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è asyncio.gather: {e_gather}")
        await message.answer("–í–æ –≤—Ä–µ–º—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.")

    # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    for res in results:
        if res and res.get("processed"):
            processed_items_count += 1
        if res and res.get("is_deal"):
            deals_found_count += 1
            
    log_info(f"–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Ç–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_items_count}, –Ω–∞–π–¥–µ–Ω–æ –≤—ã–≥–æ–¥–Ω—ã—Ö: {deals_found_count} –∏–∑ {len(product_links)} —Å—Å—ã–ª–æ–∫.")
    await message.answer(MSG_SEARCH_COMPLETED.format(processed=processed_items_count, total_links=len(product_links), deals_count=deals_found_count)) 