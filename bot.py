import json
import os
import subprocess
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, BotCommand
from config import TELEGRAM_TOKEN, TELEGRAM_CHAT_ID
import asyncio
import time
from aiogram.filters import Command
from aiogram import Router
from aiogram.types import CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

USER_CONFIG = 'user_config.json'
PARSER_PROCESS_FILE = 'parser_process.pid'
PROGRESS_FILE = 'progress.json'

PARAMS_HELP = (
    "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
    "üîë <b>search</b> ‚Äî –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ø—Ä–∏–º–µ—Ä: –º–∞—Å–∫–∞ –¥–ª—è –≤–æ–ª–æ—Å)\n"
    "üîó <b>category</b> ‚Äî URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Wildberries\n"
    "üìÑ <b>update_articles</b> ‚Äî –§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω\n"
    "üé≤ <b>random</b> ‚Äî –°–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å\n"
    "üìÑ <b>all_pages</b> ‚Äî –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–±–æ—Ä (–≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)\n"
    "üí∏ <b>min_price</b> ‚Äî –ú–∏–Ω. —Ü–µ–Ω–∞ (>= 0)\n"
    "üí∞ <b>max_price</b> ‚Äî –ú–∞–∫—Å. —Ü–µ–Ω–∞\n"
    "‚≠ê <b>min_rating</b> ‚Äî –ú–∏–Ω. —Ä–µ–π—Ç–∏–Ω–≥\n"
    "üí¨ <b>min_reviews</b> ‚Äî –ú–∏–Ω. –∫–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤\n"
    "üè∑Ô∏è <b>brand</b> ‚Äî –§–∏–ª—å—Ç—Ä –ø–æ –±—Ä–µ–Ω–¥—É\n"
    "üßµ <b>threads</b> ‚Äî –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞\n"
    "üìù <b>out_json</b> ‚Äî –§–∞–π–ª –¥–ª—è JSON (–≤—ã–≤–æ–¥)\n"
    "üìä <b>out_csv</b> ‚Äî –§–∞–π–ª –¥–ª—è CSV (–≤—ã–≤–æ–¥)\n"
    "‚öôÔ∏è <b>pages</b> ‚Äî –°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–∞—Ä—Å–∏—Ç—å\n"
    "\n<b>–ü—Ä–∏–º–µ—Ä:</b> /set min_price 1000\n<b>–ü—Ä–∏–º–µ—Ä:</b> /set brand Loreal"
)

# --- –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥–æ–º ---
def load_user_config():
    if os.path.exists(USER_CONFIG):
        with open(USER_CONFIG, encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_user_config(cfg):
    with open(USER_CONFIG, 'w', encoding='utf-8') as f:
        json.dump(cfg, f, ensure_ascii=False, indent=2)

def get_param(cfg, key, default=None):
    return cfg.get(key, default)

def set_param(cfg, key, value):
    cfg[key] = value
    save_user_config(cfg)

# --- Telegram-–±–æ—Ç ---
bot = Bot(token=TELEGRAM_TOKEN)
router = Router()

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–º –ø–∞—Ä—Å–µ—Ä–∞ ---
parser_proc = None

def is_parser_running():
    if os.path.exists(PARSER_PROCESS_FILE):
        try:
            with open(PARSER_PROCESS_FILE, 'r') as f:
                pid = int(f.read().strip())
            os.kill(pid, 0)
            return True
        except Exception:
            os.remove(PARSER_PROCESS_FILE)
    return False

def save_parser_pid(pid):
    with open(PARSER_PROCESS_FILE, 'w') as f:
        f.write(str(pid))

def clear_parser_pid():
    if os.path.exists(PARSER_PROCESS_FILE):
        os.remove(PARSER_PROCESS_FILE)

async def send_file_if_exists(chat_id, filepath, caption=None):
    if os.path.exists(filepath):
        with open(filepath, "rb") as f:
            await bot.send_document(chat_id, f, caption=caption)

async def send_progress_updates(chat_id):
    last_batch = -1
    while is_parser_running():
        if os.path.exists(PROGRESS_FILE):
            with open(PROGRESS_FILE, encoding='utf-8') as f:
                try:
                    prog = json.load(f)
                except Exception:
                    prog = None
            if prog and prog.get('batch_num', -1) != last_batch:
                last_batch = prog['batch_num']
                text = (
                    f"‚è≥ <b>–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ WB</b>\n"
                    f"–ü–∞–∫–µ—Ç: <b>{prog['batch_num']}/{prog['total_batches']}</b>\n"
                    f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Å—ã–ª–æ–∫: <b>{prog['total']}</b>\n"
                    f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö: <b>{prog['found']}</b>\n"
                    f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: <b>{prog['work_time']:.1f} –º–∏–Ω</b>\n"
                )
                await bot.send_message(chat_id, text, parse_mode='HTML')
        await asyncio.sleep(60)

COMMANDS = [
    ("/show", "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"),
    ("/filters_only", "üéõÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä—ã"),
    ("/set", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä"),
    ("/toggle", "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä (on/off)"),
    ("/filters", "üõ†Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏"),
    ("/filters_wizard", "üßô‚Äç‚ôÇÔ∏è –ü–æ—à–∞–≥–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤"),
    ("/start_parsing", "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä"),
    ("/stop", "‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–µ—Ä"),
    ("/reset", "üßπ –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"),
    ("/status", "üìä –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞"),
    ("/help", "‚ÑπÔ∏è –ü–æ–º–æ—â—å –∏ —Å–ø—Ä–∞–≤–∫–∞")
]

async def set_bot_commands(bot: Bot):
    await bot.set_my_commands([
        BotCommand(command=cmd, description=desc) for cmd, desc in COMMANDS
    ])

# --- –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ ---
filters_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ –ú–∏–Ω. —Ü–µ–Ω–∞", callback_data="filter_min_price")],
        [InlineKeyboardButton(text="üí∞ –ú–∞–∫—Å. —Ü–µ–Ω–∞", callback_data="filter_max_price")],
        [InlineKeyboardButton(text="‚≠ê –ú–∏–Ω. —Ä–µ–π—Ç–∏–Ω–≥", callback_data="filter_min_rating")],
        [InlineKeyboardButton(text="üí¨ –ú–∏–Ω. –æ—Ç–∑—ã–≤—ã", callback_data="filter_min_reviews")],
        [InlineKeyboardButton(text="üè∑Ô∏è –ë—Ä–µ–Ω–¥", callback_data="filter_brand")],
    ]
)

# --- –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ ---
reset_confirm_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="reset_confirm")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="reset_cancel")],
    ]
)

# --- –û—Å–Ω–æ–≤–Ω–∞—è reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞—Å—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π ---
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"), KeyboardButton(text="üõ†Ô∏è –§–∏–ª—å—Ç—Ä—ã")],
        [KeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä"), KeyboardButton(text="‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–µ—Ä")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"), KeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é")],
    ],
    resize_keyboard=True
)

# --- –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π ---
inline_commands = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="show"),
         InlineKeyboardButton(text="üéõÔ∏è –¢–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="filters_only")],
        [InlineKeyboardButton(text="üõ†Ô∏è –§–∏–ª—å—Ç—Ä—ã", callback_data="filters")],
        [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä", callback_data="start_parsing"),
         InlineKeyboardButton(text="‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–µ—Ä", callback_data="stop")],
        [InlineKeyboardButton(text="üßπ –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="reset"),
         InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å", callback_data="status")],
        [InlineKeyboardButton(text="üßô‚Äç‚ôÇÔ∏è –ü–æ—à–∞–≥–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤", callback_data="filters_wizard")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
    ]
)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é ---
back_to_menu_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")],
    ]
)

@router.message(Command('start'))
async def cmd_start(message: types.Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WB-–ø–∞—Ä—Å–µ—Ä–æ–º.\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        + "\n".join([f"<b>{cmd}</b> ‚Äî {desc}" for cmd, desc in COMMANDS]) +
        "\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥.\n\n" + PARAMS_HELP
    )
    await message.answer(text, parse_mode='HTML', reply_markup=main_keyboard)
    await message.answer("–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=inline_commands)

@router.message(lambda m: m.text and (m.text.startswith("/show") or "–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã" in m.text))
async def cmd_show(message: types.Message):
    cfg = load_user_config()
    param_lines = [f"<b>{k}</b>: {v}" for k, v in cfg.items() if k != 'await_param']
    text = "<b>–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>"
    if param_lines:
        text += "\n" + "\n".join(param_lines)
    else:
        text += "\n–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."
    text += "\n\n<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n" + "\n".join([f"<b>{cmd}</b> ‚Äî {desc}" for cmd, desc in COMMANDS])
    text += "\n\n" + PARAMS_HELP
    await message.answer(text, parse_mode='HTML', reply_markup=main_keyboard)
    await message.answer("–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=inline_commands)

@router.message(Command('set'))
async def cmd_set(message: types.Message):
    cfg = load_user_config()
    try:
        _, key, value = message.text.split(maxsplit=2)
        if key == "min_price":
            try:
                val = float(value)
                if val < 0:
                    await message.answer("‚ùó –ú–∏–Ω. —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0!")
                    return
            except Exception:
                await message.answer("‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è min_price!")
                return
        set_param(cfg, key, value)
        await message.answer(f"–ü–∞—Ä–∞–º–µ—Ç—Ä <b>{key}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ <b>{value}</b>", parse_mode='HTML')
    except Exception:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /set –∫–ª—é—á –∑–Ω–∞—á–µ–Ω–∏–µ\n–ù–∞–ø—Ä–∏–º–µ—Ä: /set min_price 100")

@router.message(Command('toggle'))
async def cmd_toggle(message: types.Message):
    cfg = load_user_config()
    try:
        _, key = message.text.split(maxsplit=1)
        val = not bool(cfg.get(key, False))
        set_param(cfg, key, val)
        await message.answer(f"–ü–∞—Ä–∞–º–µ—Ç—Ä <b>{key}</b> –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞ <b>{val}</b>", parse_mode='HTML')
    except Exception:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /toggle –∫–ª—é—á\n–ù–∞–ø—Ä–∏–º–µ—Ä: /toggle enable_proxy")

@router.message(Command('filters'))
async def cmd_filters(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=filters_keyboard)

@router.callback_query(lambda c: c.data.startswith("filter_"))
async def filter_callback(callback: CallbackQuery, state: FSMContext):
    filter_type = callback.data.replace("filter_", "")
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞: {filter_type}")
    await callback.answer()
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å FSM –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è

@router.message()
async def set_value(msg: types.Message):
    cfg = load_user_config()
    param = cfg.get('await_param')
    if param:
        set_param(cfg, param, msg.text)
        cfg.pop('await_param', None)
        save_user_config(cfg)
        await msg.answer(f"–ü–∞—Ä–∞–º–µ—Ç—Ä <b>{param}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ <b>{msg.text}</b>", parse_mode='HTML')

@router.message(Command('start_parsing'))
async def cmd_start_parsing(message: types.Message):
    if is_parser_running():
        await message.answer("–ü–∞—Ä—Å–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    cfg = load_user_config()
    await message.answer("–ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç—á—ë—Ç...")
    args = []
    for k, v in cfg.items():
        if isinstance(v, bool):
            if v:
                args.append(f"--{k}")
        elif k != 'await_param':
            args.append(f"--{k}")
            args.append(str(v))
    progress_task = asyncio.create_task(send_progress_updates(message.chat.id))
    proc = await asyncio.create_subprocess_exec(
        'python', 'main.py', *args,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE
    )
    save_parser_pid(proc.pid)
    stdout, stderr = await proc.communicate()
    clear_parser_pid()
    progress_task.cancel()
    await send_file_if_exists(message.chat.id, cfg.get('out_json', 'results.json'), caption="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã WB –ø–∞—Ä—Å–µ—Ä–∞ (JSON)")
    await send_file_if_exists(message.chat.id, cfg.get('out_csv', 'results.csv'), caption="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã WB –ø–∞—Ä—Å–µ—Ä–∞ (CSV)")
    await send_file_if_exists(message.chat.id, cfg.get('error_log', 'errors.log'), caption="–õ–æ–≥ –æ—à–∏–±–æ–∫ WB –ø–∞—Ä—Å–µ—Ä–∞")
    await message.answer("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω! –ò—Ç–æ–≥–∏ –∏ —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

@router.message(Command('stop'))
async def cmd_stop(message: types.Message):
    if not is_parser_running():
        await message.answer("–ü–∞—Ä—Å–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
        return
    try:
        with open(PARSER_PROCESS_FILE, 'r') as f:
            pid = int(f.read().strip())
        os.kill(pid, 9)
        clear_parser_pid()
        await message.answer("–ü–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞—Ä—Å–µ—Ä–∞: {e}")

@router.message(Command('help'))
@router.message(lambda m: m.text and ("–ü–æ–º–æ—â—å" in m.text))
async def cmd_help(message: types.Message):
    text = (
        "<b>‚ÑπÔ∏è –ü–æ–º–æ—â—å –∏ —Å–ø—Ä–∞–≤–∫–∞</b>\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–∞—Ä—Å–µ—Ä–æ–º Wildberries —á–µ—Ä–µ–∑ Telegram.\n\n"
        + PARAMS_HELP +
        "\n\n<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        + "\n".join([f"<b>{cmd}</b> ‚Äî {desc}" for cmd, desc in COMMANDS])
    )
    await message.answer(text, parse_mode='HTML', reply_markup=main_keyboard)
    await message.answer("–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=inline_commands)

@router.message(Command('reset'))
async def cmd_reset(message: types.Message):
    await message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã?", reply_markup=reset_confirm_keyboard)

@router.callback_query(lambda c: c.data == "reset_confirm")
async def reset_confirm(callback: CallbackQuery, state: FSMContext):
    # –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    reset_user_config(callback.from_user.id)
    await callback.message.answer("–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã! üßπ")
    await callback.answer()

@router.callback_query(lambda c: c.data == "reset_cancel")
async def reset_cancel(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–°–±—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.")
    await callback.answer()

@router.message(lambda m: m.text and (m.text.startswith("/filters_only") or "–¢–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä—ã" in m.text))
async def cmd_filters_only(message: types.Message):
    cfg = load_user_config()
    filter_keys = [
        ("min_price", "üí∏ –ú–∏–Ω. —Ü–µ–Ω–∞"),
        ("max_price", "üí∞ –ú–∞–∫—Å. —Ü–µ–Ω–∞"),
        ("min_rating", "‚≠ê –ú–∏–Ω. —Ä–µ–π—Ç–∏–Ω–≥"),
        ("min_reviews", "üí¨ –ú–∏–Ω. –æ—Ç–∑—ã–≤—ã"),
        ("brand", "üè∑Ô∏è –ë—Ä–µ–Ω–¥"),
    ]
    lines = [f"{emoji} <b>{key}</b>: {cfg.get(key, '–Ω–µ –∑–∞–¥–∞–Ω–æ')}" for key, emoji in filter_keys]
    text = "<b>–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n" + "\n".join(lines)
    await message.answer(text, parse_mode='HTML', reply_markup=main_keyboard)
    await message.answer("–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=inline_commands)

@router.message(lambda m: m.text and (m.text.startswith("/status") or "–°—Ç–∞—Ç—É—Å" in m.text))
async def cmd_status(message: types.Message):
    running = is_parser_running()
    status = "üü¢ –ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω" if running else "üî¥ –ü–∞—Ä—Å–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-—Ñ–∞–π–ª
    progress = ""
    if os.path.exists(PROGRESS_FILE):
        with open(PROGRESS_FILE, encoding='utf-8') as f:
            try:
                prog = json.load(f)
                progress = (
                    f"\n–ü–∞–∫–µ—Ç: <b>{prog.get('batch_num', '?')}/{prog.get('total_batches', '?')}</b>"
                    f"\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Å—ã–ª–æ–∫: <b>{prog.get('total', '?')}</b>"
                    f"\n–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö: <b>{prog.get('found', '?')}</b>"
                    f"\n–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: <b>{prog.get('work_time', 0):.1f} –º–∏–Ω</b>"
                )
            except Exception:
                progress = "\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ."
    await message.answer(f"<b>üìä –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞</b>\n{status}{progress}", parse_mode='HTML', reply_markup=main_keyboard)
    await message.answer("–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=inline_commands)

@router.callback_query(lambda c: c.data in ["show", "filters_only", "filters", "start_parsing", "stop", "reset", "status", "help"])
async def quick_command_callback(callback: types.CallbackQuery, bot: Bot):
    if callback.data == "show":
        await cmd_show(callback.message)
    elif callback.data == "filters_only":
        await cmd_filters_only(callback.message)
    elif callback.data == "filters":
        await cmd_filters(callback.message)
    elif callback.data == "start_parsing":
        await cmd_start_parsing(callback.message)
    elif callback.data == "stop":
        await cmd_stop(callback.message)
    elif callback.data == "reset":
        await cmd_reset(callback.message)
    elif callback.data == "status":
        await cmd_status(callback.message)
    elif callback.data == "help":
        await cmd_help(callback.message)
    await callback.answer()

class FilterWizard(StatesGroup):
    min_price = State()
    max_price = State()
    min_rating = State()
    min_reviews = State()
    brand = State()
    confirm = State()

@router.message(lambda m: m.text and (m.text.startswith("/filters_wizard") or "–ü–æ—à–∞–≥–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤" in m.text))
async def start_filters_wizard(message: types.Message, state: FSMContext):
    await message.answer("üßô‚Äç‚ôÇÔ∏è –ü–æ—à–∞–≥–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤.\n–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (min_price):", reply_markup=main_keyboard)
    await state.set_state(FilterWizard.min_price)

@router.callback_query(lambda c: c.data == "filters_wizard")
async def start_filters_wizard_cb(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üßô‚Äç‚ôÇÔ∏è –ü–æ—à–∞–≥–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤.\n–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (min_price):", reply_markup=main_keyboard)
    await state.set_state(FilterWizard.min_price)
    await callback.answer()

@router.message(FilterWizard.min_price)
async def wizard_min_price(message: types.Message, state: FSMContext):
    try:
        val = float(message.text)
        if val < 0:
            await message.answer("‚ùó –ú–∏–Ω. —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0! –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return
        await state.update_data(min_price=val)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (max_price):")
        await state.set_state(FilterWizard.max_price)
    except Exception:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è min_price:")

@router.message(FilterWizard.max_price)
async def wizard_max_price(message: types.Message, state: FSMContext):
    try:
        val = float(message.text)
        await state.update_data(max_price=val)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (min_rating):")
        await state.set_state(FilterWizard.min_rating)
    except Exception:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è max_price:")

@router.message(FilterWizard.min_rating)
async def wizard_min_rating(message: types.Message, state: FSMContext):
    try:
        val = float(message.text)
        await state.update_data(min_rating=val)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ (min_reviews):")
        await state.set_state(FilterWizard.min_reviews)
    except Exception:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è min_rating:")

@router.message(FilterWizard.min_reviews)
async def wizard_min_reviews(message: types.Message, state: FSMContext):
    try:
        val = int(message.text)
        await state.update_data(min_reviews=val)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –±—Ä–µ–Ω–¥ (brand) –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º:")
        await state.set_state(FilterWizard.brand)
    except Exception:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è min_reviews:")

@router.message(FilterWizard.brand)
async def wizard_brand(message: types.Message, state: FSMContext):
    await state.update_data(brand=message.text.strip() if message.text.strip() else None)
    data = await state.get_data()
    text = (
        "<b>–í—ã –≤–≤–µ–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n"
        f"üí∏ min_price: <b>{data.get('min_price')}</b>\n"
        f"üí∞ max_price: <b>{data.get('max_price')}</b>\n"
        f"‚≠ê min_rating: <b>{data.get('min_rating')}</b>\n"
        f"üí¨ min_reviews: <b>{data.get('min_reviews')}</b>\n"
        f"üè∑Ô∏è brand: <b>{data.get('brand') or '–Ω–µ –∑–∞–¥–∞–Ω–æ'}</b>\n\n"
        "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è?"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="wizard_save")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="wizard_cancel")],
    ])
    await message.answer(text, parse_mode='HTML', reply_markup=kb)
    await state.set_state(FilterWizard.confirm)

@router.callback_query(lambda c: c.data == "wizard_save", FilterWizard.confirm)
async def wizard_save(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    cfg = load_user_config()
    cfg.update({
        "min_price": data.get("min_price"),
        "max_price": data.get("max_price"),
        "min_rating": data.get("min_rating"),
        "min_reviews": data.get("min_reviews"),
        "brand": data.get("brand"),
    })
    save_user_config(cfg)
    await callback.message.answer("‚úÖ –§–∏–ª—å—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", reply_markup=main_keyboard)
    await state.clear()
    await callback.answer()

@router.callback_query(lambda c: c.data == "wizard_cancel", FilterWizard.confirm)
async def wizard_cancel(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚ùå –ü–æ—à–∞–≥–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_keyboard)
    await state.clear()
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é ---
@router.callback_query(lambda c: c.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard)
    await callback.message.answer("–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=inline_commands)
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help –∏ –∫–Ω–æ–ø–∫–∏ ---
@router.callback_query(lambda c: c.data == "help")
async def help_callback(callback: CallbackQuery):
    text = (
        "<b>‚ÑπÔ∏è –ü–æ–º–æ—â—å –∏ —Å–ø—Ä–∞–≤–∫–∞</b>\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–∞—Ä—Å–µ—Ä–æ–º Wildberries —á–µ—Ä–µ–∑ Telegram.\n\n"
        + PARAMS_HELP +
        "\n\n<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        + "\n".join([f"<b>{cmd}</b> ‚Äî {desc}" for cmd, desc in COMMANDS])
    )
    await callback.message.answer(text, parse_mode='HTML', reply_markup=main_keyboard)
    await callback.message.answer("–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=inline_commands)
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –ø–æ —Ç–µ–∫—Å—Ç—É ---
@router.message(lambda m: m.text and ("–í –º–µ–Ω—é" in m.text))
async def back_to_menu_text(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard)
    await message.answer("–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=inline_commands)

if __name__ == '__main__':
    import asyncio
    async def main():
        dp = Dispatcher()
        dp.include_router(router)
        await set_bot_commands(bot)
        await dp.start_polling(bot)
    asyncio.run(main()) 